{"version":3,"sources":["dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/fixtures.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/owner.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/smack-model-fixtures.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/store.js","dummy/tests/integration/adapters/smack-models-test.js","dummy/tests/integration/serializers/ls-serializer-test.js","dummy/tests/test-helper.js","dummy/tests/unit/models/compilation-unit-test.js","dummy/tests/unit/models/connection-test.js","dummy/tests/unit/models/execute-anonymous-event-test.js","dummy/tests/unit/models/execute-event-test.js","dummy/tests/unit/models/test-datum-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('dummy/tests/helpers/fixtures', ['exports'], function (exports) {\n  exports['default'] = {\n    'list': {\n      records: {\n        'l1': { id: 'l1', name: 'one', done: true, items: ['i1', 'i2'] },\n        'l2': { id: 'l2', name: 'two', done: false, items: [] },\n        'l3': { id: 'l3', name: 'three', done: false, items: [] }\n      }\n    },\n\n    'item': {\n      records: {\n        'i1': { id: 'i1', name: 'one', list: 'l1' },\n        'i2': { id: 'i2', name: 'two', list: 'l1' }\n      }\n    },\n\n    'order': {\n      records: {\n        'o1': { id: 'o1', name: 'one', done: true, hours: ['h1', 'h2'] },\n        'o2': { id: 'o2', name: 'two', done: false, hours: [] },\n        'o3': { id: 'o3', name: 'three', done: true, hours: ['h3', 'h4'] },\n        'o4': { id: 'o4', name: 'four', done: true, hours: [] }\n      }\n    },\n\n    'hour': {\n      records: {\n        'h1': { id: 'h1', name: 'one', amount: 4, order: 'o1' },\n        'h2': { id: 'h2', name: 'two', amount: 3, order: 'o1' },\n        'h3': { id: 'h3', name: 'three', amount: 2, order: 'o3' },\n        'h4': { id: 'h4', name: 'four', amount: 1, order: 'o3' }\n      }\n    }\n  };\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _dummyTestsHelpersStartApp, _dummyTestsHelpersDestroyApp) {\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _dummyTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        (0, _dummyTestsHelpersDestroyApp['default'])(this.application);\n\n        if (options.afterEach) {\n          options.afterEach.apply(this, arguments);\n        }\n      }\n    });\n  };\n});","define('dummy/tests/helpers/owner', ['exports', 'ember'], function (exports, _ember) {\n\n  var Owner = undefined;\n\n  if (_ember['default']._RegistryProxyMixin && _ember['default']._ContainerProxyMixin) {\n    Owner = _ember['default'].Object.extend(_ember['default']._RegistryProxyMixin, _ember['default']._ContainerProxyMixin);\n  } else {\n    Owner = _ember['default'].Object.extend();\n  }\n\n  exports['default'] = Owner;\n});","define('dummy/tests/helpers/resolver', ['exports', 'ember/resolver', 'dummy/config/environment'], function (exports, _emberResolver, _dummyConfigEnvironment) {\n\n  var resolver = _emberResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _dummyConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _dummyConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('dummy/tests/helpers/smack-model-fixtures', ['exports'], function (exports) {\n  exports['default'] = {\n    'connection': {\n      records: {}\n    },\n\n    'compilation-unit': {\n      records: {}\n    },\n\n    'execute-event': {\n      records: {}\n    },\n\n    'execute-anonymous-event': {\n      records: {}\n    }\n  };\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember', 'dummy/app', 'dummy/config/environment'], function (exports, _ember, _dummyApp, _dummyConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var application = undefined;\n\n    var attributes = _ember['default'].merge({}, _dummyConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    _ember['default'].run(function () {\n      application = _dummyApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/store', ['exports', 'ember', 'ember-data', 'dummy/tests/helpers/owner', 'smack-ember-adapters/serializers/ls-serializer'], function (exports, _ember, _emberData, _dummyTestsHelpersOwner, _smackEmberAdaptersSerializersLsSerializer) {\n  exports['default'] = setupStore;\n\n  function setupStore(options) {\n    var container = undefined,\n        registry = undefined,\n        owner = undefined;\n    var env = {};\n    options = options || {};\n\n    if (_ember['default'].Registry) {\n      registry = env.registry = new _ember['default'].Registry();\n      owner = _dummyTestsHelpersOwner['default'].create({\n        __registry__: registry\n      });\n      container = env.container = registry.container({ owner: owner });\n      owner.__container__ = container;\n    } else {\n      container = env.container = new _ember['default'].Container();\n      registry = env.registry = container;\n    }\n\n    env.replaceContainerNormalize = function replaceContainerNormalize(fn) {\n      if (env.registry) {\n        env.registry.normalize = fn;\n      } else {\n        env.container.normalize = fn;\n      }\n    };\n\n    var adapter = env.adapter = options.adapter || '-default';\n    delete options.adapter;\n\n    if (typeof adapter !== 'string') {\n      env.registry.register('adapter:-default', adapter);\n      adapter = '-default';\n    }\n\n    for (var prop in options) {\n      registry.register('model:' + _ember['default'].String.dasherize(prop), options[prop]);\n    }\n\n    registry.register('service:store', _emberData['default'].Store.extend({ adapter: adapter }));\n\n    registry.optionsForType('serializer', { singleton: false });\n    registry.optionsForType('adapter', { singleton: false });\n\n    registry.register('serializer:-default', _smackEmberAdaptersSerializersLsSerializer['default']);\n\n    env.store = container.lookup('service:store');\n    env.serializer = container.lookup('serializer:-default');\n    env.adapter = container.lookup('adapter:-default');\n\n    return env;\n  }\n\n  var transforms = {\n    'boolean': _emberData['default'].BooleanTransform.create(),\n    'date': _emberData['default'].DateTransform.create(),\n    'number': _emberData['default'].NumberTransform.create(),\n    'string': _emberData['default'].StringTransform.create()\n  };\n\n  // Prevent all tests involving serialization to require a container\n  _emberData['default'].JSONSerializer.reopen({\n    transformFor: function transformFor(attributeType) {\n      return this._super(attributeType, true) || transforms[attributeType];\n    }\n  });\n});","define('dummy/tests/integration/adapters/smack-models-test', ['exports', 'dummy/tests/helpers/store', 'ember', 'dummy/tests/helpers/smack-model-fixtures', 'ember-data', 'smack-ember-adapters/adapters/ls-adapter', 'smack-ember-adapters/adapters/smackHooks', 'smack-ember-adapters/models/connection', 'smack-ember-adapters/models/compilation-unit', 'smack-ember-adapters/models/execute-event', 'smack-ember-adapters/models/execute-anonymous-event', 'smack-ember-adapters/models/test-datum', 'qunit'], function (exports, _dummyTestsHelpersStore, _ember, _dummyTestsHelpersSmackModelFixtures, _emberData, _smackEmberAdaptersAdaptersLsAdapter, _smackEmberAdaptersAdaptersSmackHooks, _smackEmberAdaptersModelsConnection, _smackEmberAdaptersModelsCompilationUnit, _smackEmberAdaptersModelsExecuteEvent, _smackEmberAdaptersModelsExecuteAnonymousEvent, _smackEmberAdaptersModelsTestDatum, _qunit) {\n  var run = _ember['default'].run;\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n\n  var env = undefined,\n      store = undefined;\n\n  (0, _qunit.module)('integration/adapters/ls-adapter - LSAdapter', {\n    beforeEach: function beforeEach() {\n      localStorage.setItem('DS.LSAdapter', JSON.stringify(_dummyTestsHelpersSmackModelFixtures['default']));\n\n      env = (0, _dummyTestsHelpersStore['default'])({\n        'connection': _smackEmberAdaptersModelsConnection['default'],\n        'compilation-unit': _smackEmberAdaptersModelsCompilationUnit['default'],\n        'execute-event': _smackEmberAdaptersModelsExecuteEvent['default'],\n        'execute-anonymous-event': _smackEmberAdaptersModelsExecuteAnonymousEvent['default'],\n        'test-datum': _smackEmberAdaptersModelsTestDatum['default'],\n        adapter: _smackEmberAdaptersAdaptersLsAdapter['default']\n      });\n      store = env.store;\n    },\n\n    afterEach: function afterEach() {\n      run(store, 'destroy');\n      _smackEmberAdaptersAdaptersSmackHooks['default']._ns = {};\n    }\n  });\n\n  (0, _qunit.test)('exists through the store', function (assert) {\n    var lsAdapter = store.adapterFor('-default');\n    var lsSerializer = store.serializerFor('-default');\n    assert.ok(lsAdapter, 'LSAdapter exists');\n    assert.ok(lsSerializer, 'LSSerializer exists');\n  });\n\n  // test('connection create and find - hook', function(t) {\n  //   t.expect(7);\n  //   // const list = run(store, 'createRecord', 'list', {name: 'Rambo'});\n  //   var connection = run(store, 'createRecord', 'connection', { username : 'dude', password : 'IL0veMum' });\n  //   t.equal(get(connection, 'username'), 'dude', 'username unchanged');\n  //   t.equal(get(connection, 'password'), 'IL0veMum', 'password unchanged');\n  //   t.ok(!!get(connection, 'session'), 'session id created');\n\n  //   const done = t.async();\n  //   run(store, 'findRecord', 'connection', get(connection, 'id')).then(con => {\n  //     t.equal(get(con, 'id'), get(connection, 'id'), 'id unchanged');\n  //     t.equal(get(con, 'username'), 'dude', 'username unchanged');\n  //     t.notOk(get(con, 'password'), 'password hidden');\n  //     t.equal(get(con, 'session'), get(connection, 'session'), 'session unchanged');\n  //     done();\n  //   });\n  // });\n\n  (0, _qunit.test)('compilation-unit create, update, execute, execute anonymous and delete - hook', function (t) {\n    // t.expect();\n\n    // create\n    var cuc = run(store, 'createRecord', 'compilation-unit', { name: 'sum', source: 'pack math; func add(a, b) { ret a + b; } func sub(a, b) { ret a - b; }' });\n    var id = get(cuc, 'id');\n\n    var done = t.async();\n    run(store, 'findRecord', 'compilation-unit', get(cuc, 'id')).then(function (cuf) {\n      t.equal(get(cuf, 'id'), get(cuc, 'id'), 'id unchanged');\n      t.equal(get(cuf, 'name'), 'sum', 'name unchanged');\n      t.equal(get(cuf, 'source'), 'pack math; func add(a, b) { ret a + b; } func sub(a, b) { ret a - b; }', 'source unchanged');\n      t.equal(get(cuf, 'pack'), 'math', 'package name set');\n      t.deepEqual(get(cuf, 'funcNames'), ['add', 'sub'], 'function names set');\n      // t.equal(typeof SmackHooks.getFuncNamespace('math').add, 'function', 'add function created in the math namespace');\n      // t.equal(typeof SmackHooks.getFuncNamespace('math').sub, 'function', 'sub function created in the math namespace');\n\n      cuc = cuf;\n      done();\n    });\n\n    // // update\n    // run(cuc, 'set', 'source', 'pack math; func add(a, b) { ret a + b; } func error() { nonexistent.param = 1; }');\n\n    // run(cuc, 'save').then(cuu => {\n    //   t.equal(get(cuu, 'id'), get(cuc, 'id'), 'id unchanged');\n    //   t.equal(get(cuu, 'name'), 'sum', 'name unchanged');\n    //   t.equal(get(cuu, 'source'), 'pack math; func add(a, b) { ret a + b; } func error() { nonexistent.param = 1; }', 'source updated');\n    //   t.equal(get(cuu, 'pack'), 'math', 'package name unchanged');\n    //   t.deepEqual(get(cuu, 'funcNames'), ['add', 'error'], 'function names updated');\n    //   t.equal(typeof SmackHooks.getFuncNamespace('math').add, 'function', 'add function still in the math namespace');\n    //   t.equal(typeof SmackHooks.getFuncNamespace('math').sub, 'undefined', 'sub function removed from the math namespace');\n    //   done();\n    // });\n\n    // // execute\n    // var ee = run(store, 'createRecord', 'execute-event',\n    //     { name : 'math.add', arguments : [1, 1] });\n    // t.equal(get(ee, 'result'), 2, 'execution result');\n    // t.ok(get(ee, 'success'), 'success status');\n\n    // ee = run(store, 'createRecord', 'execute-event',\n    //     { name : 'math.error' });\n    // t.notOk(get(ee, 'success'), 'success status');\n    // t.ok(get(ee, 'errorMessage'), 'error message');\n\n    // // execute anonymous\n    // var eae = run(store, 'createRecord', 'execute-anonymous-event',\n    //     { source : 'c = a + b', arguments : { a : 1, b : 1, c : 0 }});\n    // t.deepEqual(get(eae, 'result'), { a : 1, b : 1, c : 2 }, 'execution result');\n    // t.ok(get(eae, 'success'), 'success status');\n\n    // eae = run(store, 'createRecord', 'execute-anonymous-event',\n    //     { source : 'nonexistent.property = 1', arguments : {}});\n    // t.notOk(get(eae, 'success'), 'success status');\n    // t.ok(get(eae, 'errorMessage'), 'error message');\n\n    // // update again\n    // run(cuc, 'set', 'source', 'pack mathematics; func add(a, b) { ret a + b; }');\n\n    // run(cuc, 'save').then(cuu => {\n    //   t.equal(get(cuu, 'id'), get(cuc, 'id'), 'id unchanged');\n    //   t.equal(get(cuu, 'name'), 'sum', 'name unchanged');\n    //   t.equal(get(cuu, 'source'), 'pack mathematics; func add(a, b) { ret a + b; }', 'source updated');\n    //   t.equal(get(cuu, 'pack'), 'mathematics', 'package name updated');\n    //   t.deepEqual(get(cuu, 'funcNames'), ['add'], 'function names unchanged');\n    //   t.equal(typeof SmackHooks.getFuncNamespace('math').add, 'undefined', 'add function removed from the math namespace');\n    //   t.equal(typeof SmackHooks.getFuncNamespace('mathematics').add, 'function', 'add function created in the mathematics namespace');\n    //   done();\n    //  });\n\n    // // delete\n    // run(cuc, 'delete').then(() => {\n    //   t.equal(store.hasRecordForId('compilation-unit', id), false, 'record still in store');\n    //   t.equal(typeof SmackHooks.getFuncNamespace('math').add, 'undefined', 'add function removed from the math namespace');\n    //   t.equal(typeof SmackHooks.getFuncNamespace('math').sub, 'undefined', 'sub function removed from the math namespace');\n    //   done();\n    // });\n  });\n});\n\n// hooks\n\n// models","define('dummy/tests/integration/serializers/ls-serializer-test', ['exports', 'dummy/tests/helpers/store', 'ember', 'dummy/tests/helpers/fixtures', 'ember-data', 'smack-ember-adapters/adapters/ls-adapter', 'qunit'], function (exports, _dummyTestsHelpersStore, _ember, _dummyTestsHelpersFixtures, _emberData, _smackEmberAdaptersAdaptersLsAdapter, _qunit) {\n  var run = _ember['default'].run;\n\n  var env = undefined,\n      store = undefined,\n      registry = undefined,\n      List = undefined,\n      Item = undefined;\n\n  (0, _qunit.module)('integration/serializers/ls-serializer - LSSerializer', {\n    beforeEach: function beforeEach() {\n      localStorage.setItem('DS.LSAdapter', JSON.stringify(_dummyTestsHelpersFixtures['default']));\n\n      List = _emberData['default'].Model.extend({\n        name: _emberData['default'].attr('string'),\n        done: _emberData['default'].attr('boolean'),\n        items: _emberData['default'].hasMany('item', { async: true })\n      });\n\n      Item = _emberData['default'].Model.extend({\n        name: _emberData['default'].attr('string'),\n        list: _emberData['default'].belongsTo('list', { async: true })\n      });\n\n      env = (0, _dummyTestsHelpersStore['default'])({\n        list: List,\n        item: Item,\n        adapter: _smackEmberAdaptersAdaptersLsAdapter['default']\n      });\n      store = env.store;\n      registry = env.registry;\n    },\n\n    afterEach: function afterEach() {\n      run(store, 'destroy');\n    }\n  });\n\n  (0, _qunit.test)('serializeHasMany respects keyForRelationship', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    store.serializerFor('list').reopen({\n      keyForRelationship: function keyForRelationship(key /*type*/) {\n        return key.toUpperCase();\n      }\n    });\n\n    var list = run(store, 'createRecord', 'list', { name: 'Rails is omakase', id: 1 });\n    var comment = run(store, 'createRecord', 'item', { name: 'Omakase is delicious', list: list, id: 1 });\n\n    return _ember['default'].RSVP.all([list, comment]).then(function () {\n      var json = {};\n      var snapshot = list._createSnapshot();\n      store.serializerFor('list').serializeHasMany(snapshot, json, {\n        key: 'items', options: {}\n      });\n      assert.deepEqual(json, { ITEMS: ['1'] });\n\n      registry.unregister('serializer:list');\n      done();\n    });\n  });\n\n  (0, _qunit.test)('normalizeArrayResponse calls normalizeSingleResponse', function (assert) {\n    assert.expect(1);\n    var done = assert.async();\n    var callCount = 0;\n\n    store.serializerFor('list').reopen({\n      normalizeSingleResponse: function normalizeSingleResponse(store, type, payload) {\n        callCount++;\n        return this.normalize(type, payload);\n      }\n    });\n\n    run(store, 'findAll', 'list').then(function () {\n      assert.equal(callCount, 3);\n      done();\n    });\n\n    registry.unregister('serializer:list');\n  });\n});","define('dummy/tests/test-helper', ['exports', 'dummy/tests/helpers/resolver', 'ember-qunit'], function (exports, _dummyTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_dummyTestsHelpersResolver['default']);\n});","define('dummy/tests/unit/models/compilation-unit-test', ['exports', 'ember-qunit', 'ember', 'smack-ember-adapters/adapters/smackHooks'], function (exports, _emberQunit, _ember, _smackEmberAdaptersAdaptersSmackHooks) {\n  var run = _ember['default'].run;\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n\n  (0, _emberQunit.moduleForModel)('compilation-unit', 'Unit | Model | compilation unit', {\n    // Specify the other units that are required for this test.\n    needs: ['model:test-datum']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('beforeCreate - hook', function (t) {\n    var model = { name: 'sum', source: 'pack math; func add(a, b) { ret a + b; } func sub(a, b) { ret a - b; }' };\n\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeCreate', null, { modelName: 'compilation-unit' }, model);\n\n    t.equal(model.name, 'sum', 'name unchanged');\n    t.equal(model.source, 'pack math; func add(a, b) { ret a + b; } func sub(a, b) { ret a - b; }', 'source unchanged');\n    t.equal(model.pack, 'math', 'package name set');\n    t.deepEqual(model.funcNames, ['add', 'sub'], 'function names set');\n    t.equal(typeof _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').add, 'function', 'add function created in the math namespace');\n    t.equal(typeof _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').sub, 'function', 'sub function created in the math namespace');\n\n    delete _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').add;\n    delete _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').sub;\n  });\n\n  (0, _emberQunit.test)('beforeDelete - hook', function (t) {\n    var model = { name: 'sum', source: 'pack math; func add(a, b) { ret a + b; } func sub(a, b) { ret a - b; }' };\n\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeCreate', null, { modelName: 'compilation-unit' }, model);\n    t.equal(typeof _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').add, 'function', 'add function created in the math namespace');\n    t.equal(typeof _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').sub, 'function', 'sub function created in the math namespace');\n\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeDelete', null, { modelName: 'compilation-unit' }, model);\n    t.equal(typeof _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').add, 'undefined', 'add function removed from the math namespace');\n    t.equal(typeof _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').sub, 'undefined', 'sub function removed from the math namespace');\n  });\n\n  (0, _emberQunit.test)('beforeUpdate - hook', function (t) {\n    var model = { name: 'sum', source: 'pack math; func add(a, b) { ret a + b; } func sub(a, b) { ret a - b; }' };\n\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeCreate', null, { modelName: 'compilation-unit' }, model);\n    model.source = 'pack math; func add(a, b) { ret a + b; }';\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeUpdate', null, { modelName: 'compilation-unit' }, model);\n\n    t.equal(typeof _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').add, 'function', 'add function still in the math namespace');\n    t.equal(typeof _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').sub, 'undefined', 'sub function removed from the math namespace');\n\n    model.source = 'pack mathematics; func add(a, b) { ret a + b; }';\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeUpdate', null, { modelName: 'compilation-unit' }, model);\n\n    t.equal(typeof _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('math').add, 'undefined', 'add function removed from the math namespace');\n    t.equal(typeof _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('mathematics').add, 'function', 'add function created in the mathematics namespace');\n\n    delete _smackEmberAdaptersAdaptersSmackHooks['default'].getFuncNamespace('mathematics').add;\n  });\n});","define('dummy/tests/unit/models/connection-test', ['exports', 'ember', 'ember-qunit', 'smack-ember-adapters/adapters/smackHooks'], function (exports, _ember, _emberQunit, _smackEmberAdaptersAdaptersSmackHooks) {\n  var run = _ember['default'].run;\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n\n  (0, _emberQunit.moduleForModel)('connection', 'Unit | Model | connection', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('onFind - hook', function (t) {\n    var model = { username: 'dude', password: 'IL0veMum', session: 'session 123' };\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'onFind', null, { modelName: 'connection' }, model);\n    t.equal(model.username, 'dude', 'username unchanged');\n    t.notOk(model.password, 'password hidden');\n    t.equal(model.session, 'session 123', 'session unchanged');\n  });\n\n  (0, _emberQunit.test)('beforeCreate - hook', function (t) {\n    var model = { username: 'dude', password: 'IL0veMum' };\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeCreate', null, { modelName: 'connection' }, model);\n    t.equal(model.username, 'dude', 'username unchanged');\n    t.equal(model.password, 'IL0veMum', 'password unchanged');\n    t.ok(!!model.session, 'session id created');\n  });\n});","define('dummy/tests/unit/models/execute-anonymous-event-test', ['exports', 'ember', 'ember-qunit', 'smack-ember-adapters/adapters/smackHooks'], function (exports, _ember, _emberQunit, _smackEmberAdaptersAdaptersSmackHooks) {\n  var run = _ember['default'].run;\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n\n  (0, _emberQunit.moduleForModel)('execute-anonymous-event', 'Unit | Model | execute anonymous event', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('beforeCreate - hook - execute 1 + 1', function (t) {\n    var model = { source: 'c = a + b;', arguments: { a: 1, b: 1, c: 0 } };\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeCreate', null, { modelName: 'execute-anonymous-event' }, model);\n    t.deepEqual(model.result, { a: 1, b: 1, c: 2 }, 'execution result');\n    t.ok(model.success, 'success status');\n  });\n\n  (0, _emberQunit.test)('beforeCreate - hook - error', function (t) {\n    var model = { source: 'nonexistent[\"property\"] = 1;', arguments: {} };\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeCreate', null, { modelName: 'execute-anonymous-event' }, model);\n    t.notOk(model.success, 'success status');\n    t.ok(model.errorMessage, 'error message');\n  });\n});","define('dummy/tests/unit/models/execute-event-test', ['exports', 'ember', 'ember-qunit', 'smack-ember-adapters/adapters/smackHooks'], function (exports, _ember, _emberQunit, _smackEmberAdaptersAdaptersSmackHooks) {\n  var run = _ember['default'].run;\n  var get = _ember['default'].get;\n  var set = _ember['default'].set;\n\n  (0, _emberQunit.moduleForModel)('execute-event', 'Unit | Model | execute event', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n\n  (0, _emberQunit.test)('beforeCreate - hook - execute 1 + 1', function (t) {\n    _smackEmberAdaptersAdaptersSmackHooks['default'].getPackNamespace('')['math'] = { _f: {\n        add: function add(a, b) {\n          return a + b;\n        }\n      } };\n    var model = { name: 'math.add', arguments: [1, 1] };\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeCreate', null, { modelName: 'execute-event' }, model);\n    t.equal(model.result, 2, 'execution result');\n    t.ok(model.success, 'success status');\n    console.log(model.errorMessage);\n    delete _smackEmberAdaptersAdaptersSmackHooks['default'].getPackNamespace('')['math'];\n  });\n\n  (0, _emberQunit.test)('beforeCreate - hook - error', function (t) {\n    _smackEmberAdaptersAdaptersSmackHooks['default'].getPackNamespace('')['math'] = { _f: {\n        error: function error() {\n          throw 'deliberate error';\n        }\n      } };\n    var model = { name: 'math.error' };\n    run(_smackEmberAdaptersAdaptersSmackHooks['default'], 'beforeCreate', null, { modelName: 'execute-event' }, model);\n    t.notOk(model.success, 'success status');\n    t.equal(model.errorMessage, 'deliberate error', 'error message');\n    delete _smackEmberAdaptersAdaptersSmackHooks['default'].getPackNamespace('')['math'];\n  });\n});","define('dummy/tests/unit/models/test-datum-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForModel)('test-datum', 'Unit | Model | test datum', {\n    // Specify the other units that are required for this test.\n    needs: ['model:compilation-unit']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","/* jshint ignore:start */\n\nrequire('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpxIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;","file":"tests.js"}